// University Data Pipeline System
// Fetches data from multiple sources and populates database

const axios = require('axios');
const cheerio = require('cheerio');
const { PrismaClient } = require('@prisma/client');
const fs = require('fs').promises;
const path = require('path');

const prisma = new PrismaClient();

class UniversityDataPipeline {
  constructor() {
    this.rateLimiter = new Map();
    this.dataCache = new Map();
    this.config = {
      maxRetries: 3,
      retryDelay: 1000,
      requestDelay: 2000, // Delay between requests
      batchSize: 10
    };
  }

  // ==================== DATA SOURCES ====================

  // QS World University Rankings API
  async fetchQSRankings() {
    try {
      const response = await this.makeRequest('https://www.topuniversities.com/sites/default/files/qs-rankings/files/qs-wur-2024-location.json');
      return response.data;
    } catch (error) {
      console.error('Error fetching QS rankings:', error);
      return null;
    }
  }

  // Times Higher Education Rankings
  async fetchTHERankings() {
    try {
      // THE provides JSON endpoints for their rankings
      const response = await this.makeRequest('https://www.timeshighereducation.com/sites/default/files/the_data_rankings/world_university_rankings_2024_0__0.json');
      return response.data;
    } catch (error) {
      console.error('Error fetching THE rankings:', error);
      return null;
    }
  }

  // US News Education API
  async fetchUSNewsData() {
    try {
      const response = await this.makeRequest('https://www.usnews.com/best-colleges/api/search', {
        params: {
          format: 'json',
          _sort: 'rank',
          _page: 1,
          _limit: 1000
        }
      });
      return response.data;
    } catch (error) {
      console.error('Error fetching US News data:', error);
      return null;
    }
  }

  // College Board API (for US colleges)
  async fetchCollegeBoardData() {
    try {
      // College Board BigFuture API
      const response = await this.makeRequest('https://bigfuture.collegeboard.org/api/v1/colleges', {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });
      return response.data;
    } catch (error) {
      console.error('Error fetching College Board data:', error);
      return null;
    }
  }

  // Niche API for detailed college information
  async fetchNicheData() {
    try {
      const response = await this.makeRequest('https://www.niche.com/api/search/colleges/', {
        params: {
          page: 1,
          results: 1000
        }
      });
      return response.data;
    } catch (error) {
      console.error('Error fetching Niche data:', error);
      return null;
    }
  }

  // Peterson's Guide API
  async fetchPetersonsData() {
    try {
      const response = await this.makeRequest('https://www.petersons.com/api/college-search', {
        params: {
          format: 'json'
        }
      });
      return response.data;
    } catch (error) {
      console.error('Error fetching Peterson\'s data:', error);
      return null;
    }
  }

  // ==================== WEB SCRAPING ====================

  // Scrape university websites for detailed information
  async scrapeUniversityWebsite(universityUrl) {
    try {
      await this.delay(this.config.requestDelay);
      const response = await axios.get(universityUrl, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });

      const $ = cheerio.load(response.data);
      
      return {
        overview: this.extractOverview($),
        admissionRequirements: this.extractAdmissionRequirements($),
        tuitionFees: this.extractTuitionFees($),
        programs: this.extractPrograms($),
        contactInfo: this.extractContactInfo($),
        deadlines: this.extractDeadlines($),
        scholarships: this.extractScholarships($)
      };
    } catch (error) {
      console.error(`Error scraping ${universityUrl}:`, error);
      return null;
    }
  }

  // Extract overview information
  extractOverview($) {
    const selectors = [
      '.university-overview',
      '.about-university',
      '[data-testid="overview"]',
      '.main-content p:first-of-type'
    ];

    for (const selector of selectors) {
      const text = $(selector).text().trim();
      if (text && text.length > 100) {
        return text.substring(0, 1000);
      }
    }
    return null;
  }

  // Extract admission requirements
  extractAdmissionRequirements($) {
    const requirements = {};
    
    // GPA requirements
    const gpaText = $('*:contains("GPA")').text();
    const gpaMatch = gpaText.match(/(\d+\.?\d*)\s*GPA/i);
    if (gpaMatch) {
      requirements.minimumGpa = parseFloat(gpaMatch[1]);
    }

    // Test score requirements
    const testScores = {};
    
    // SAT scores
    const satText = $('*:contains("SAT")').text();
    const satMatch = satText.match(/SAT.*?(\d{3,4})/i);
    if (satMatch) {
      testScores.sat = parseInt(satMatch[1]);
    }

    // GMAT scores
    const gmatText = $('*:contains("GMAT")').text();
    const gmatMatch = gmatText.match(/GMAT.*?(\d{3})/i);
    if (gmatMatch) {
      testScores.gmat = parseInt(gmatMatch[1]);
    }

    // IELTS scores
    const ieltsText = $('*:contains("IELTS")').text();
    const ieltsMatch = ieltsText.match(/IELTS.*?(\d\.?\d?)/i);
    if (ieltsMatch) {
      testScores.ielts = parseFloat(ieltsMatch[1]);
    }

    return { ...requirements, testScores };
  }

  // Extract tuition and fee information
  extractTuitionFees($) {
    const fees = {};
    
    const tuitionSelectors = [
      '[data-testid="tuition"]',
      '.tuition-fees',
      '*:contains("Tuition")',
      '*:contains("Cost")'
    ];

    for (const selector of tuitionSelectors) {
      const text = $(selector).text();
      const feeMatch = text.match(/\$[\d,]+/g);
      if (feeMatch) {
        fees.tuition = parseInt(feeMatch[0].replace(/[$,]/g, ''));
        break;
      }
    }

    return fees;
  }

  // Extract program information
  extractPrograms($) {
    const programs = [];
    
    const programSelectors = [
      '.program-list li',
      '.degree-programs li',
      '[data-testid="programs"] li'
    ];

    for (const selector of programSelectors) {
      $(selector).each((index, element) => {
        const programName = $(element).text().trim();
        if (programName) {
          programs.push({
            name: programName,
            slug: this.generateSlug(programName)
          });
        }
      });
    }

    return programs;
  }

  // Extract contact information
  extractContactInfo($) {
    const contact = {};
    
    // Phone numbers
    const phoneRegex = /(\+?1?[-.\s]?\(?[2-9]\d{2}\)?[-.\s]?\d{3}[-.\s]?\d{4})/g;
    const phoneMatch = $('body').text().match(phoneRegex);
    if (phoneMatch) {
      contact.phone = phoneMatch[0];
    }

    // Email addresses
    const emailRegex = /([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/g;
    const emailMatch = $('body').text().match(emailRegex);
    if (emailMatch) {
      contact.email = emailMatch.find(email => 
        email.includes('admission') || 
        email.includes('international') ||
        email.includes('info')
      ) || emailMatch[0];
    }

    return contact;
  }

  // Extract application deadlines
  extractDeadlines($) {
    const deadlines = [];
    const deadlineText = $('*:contains("deadline"), *:contains("Deadline")').text();
    
    // Common deadline patterns
    const datePatterns = [
      /(\w+\s+\d{1,2},?\s+\d{4})/g,
      /(\d{1,2}\/\d{1,2}\/\d{4})/g,
      /(\d{1,2}-\d{1,2}-\d{4})/g
    ];

    for (const pattern of datePatterns) {
      const matches = deadlineText.match(pattern);
      if (matches) {
        deadlines.push(...matches.map(date => new Date(date)));
      }
    }

    return deadlines.filter(date => !isNaN(date.getTime()));
  }

  // Extract scholarship information
  extractScholarships($) {
    const scholarships = [];
    
    const scholarshipSelectors = [
      '.scholarship-list li',
      '.financial-aid li',
      '*:contains("scholarship")'
    ];

    for (const selector of scholarshipSelectors) {
      $(selector).each((index, element) => {
        const text = $(element).text().trim();
        if (text && text.length > 20) {
          const amountMatch = text.match(/\$[\d,]+/);
          scholarships.push({
            name: text,
            amount: amountMatch ? parseInt(amountMatch[0].replace(/[$,]/g, '')) : null
          });
        }
      });
    }

    return scholarships;
  }

  // ==================== DATA PROCESSING ====================

  // Process and normalize university data
  async processUniversityData(rawData, source) {
    const processed = {
      universityName: this.extractUniversityName(rawData, source),
      slug: null,
      city: this.extractCity(rawData, source),
      state: this.extractState(rawData, source),
      country: this.extractCountry(rawData, source),
      overview: this.extractOverviewFromData(rawData, source),
      rankings: this.extractRankings(rawData, source),
      admissionData: this.extractAdmissionData(rawData, source),
      financialData: this.extractFinancialData(rawData, source),
      programs: this.extractProgramsFromData(rawData, source)
    };

    processed.slug = this.generateSlug(processed.universityName);
    return processed;
  }

  extractUniversityName(data, source) {
    switch (source) {
      case 'qs':
        return data.institution || data.name || data.university_name;
      case 'the':
        return data.name || data.institution;
      case 'usnews':
        return data.displayName || data.name;
      case 'niche':
        return data.name || data.schoolName;
      default:
        return data.name || data.university_name || data.institution;
    }
  }

  extractCity(data, source) {
    switch (source) {
      case 'qs':
        return data.city || data.location?.city;
      case 'the':
        return data.location?.city;
      case 'usnews':
        return data.city || data.location?.city;
      default:
        return data.city || data.location?.city;
    }
  }

  extractState(data, source) {
    switch (source) {
      case 'usnews':
        return data.state || data.location?.state;
      default:
        return data.state || data.location?.state;
    }
  }

  extractCountry(data, source) {
    switch (source) {
      case 'qs':
        return data.country || data.location?.country;
      case 'the':
        return data.location?.country;
      default:
        return data.country || data.location?.country || 'United States';
    }
  }

  // ==================== DATABASE OPERATIONS ====================

  async saveUniversityToDatabase(processedData) {
    try {
      const university = await prisma.university.upsert({
        where: { slug: processedData.slug },
        update: {
          universityName: processedData.universityName,
          city: processedData.city,
          state: processedData.state,
          country: processedData.country,
          overview: processedData.overview,
          qsRanking: processedData.rankings?.qs,
          timesRanking: processedData.rankings?.the,
          usNewsRanking: processedData.rankings?.usnews,
          tuitionFees: processedData.financialData?.tuition,
          acceptanceRate: processedData.admissionData?.acceptanceRate,
          minimumGpa: processedData.admissionData?.minimumGpa,
          gmatAverageScore: processedData.admissionData?.gmatAverage,
          updatedAt: new Date()
        },
        create: {
          universityName: processedData.universityName,
          slug: processedData.slug,
          city: processedData.city || 'Unknown',
          state: processedData.state,
          country: processedData.country || 'Unknown',
          overview: processedData.overview,
          qsRanking: processedData.rankings?.qs,
          timesRanking: processedData.rankings?.the,
          usNewsRanking: processedData.rankings?.usnews,
          tuitionFees: processedData.financialData?.tuition,
          acceptanceRate: processedData.admissionData?.acceptanceRate,
          minimumGpa: processedData.admissionData?.minimumGpa,
          gmatAverageScore: processedData.admissionData?.gmatAverage,
        }
      });

      // Save programs
      if (processedData.programs && processedData.programs.length > 0) {
        await this.savePrograms(university.id, processedData.programs);
      }

      // Save rankings
      if (processedData.rankings) {
        await this.saveRankings(university.id, processedData.rankings);
      }

      return university;
    } catch (error) {
      console.error('Error saving university to database:', error);
      throw error;
    }
  }

  async savePrograms(universityId, programs) {
    for (const programData of programs) {
      try {
        await prisma.program.upsert({
          where: { programSlug: programData.slug },
          update: {
            programName: programData.name,
            programDescription: programData.description,
            updatedAt: new Date()
          },
          create: {
            universityId,
            programName: programData.name,
            programSlug: programData.slug,
            programDescription: programData.description,
            degreeType: programData.degreeType || 'Masters',
            isActive: true
          }
        });
      } catch (error) {
        console.error(`Error saving program ${programData.name}:`, error);
      }
    }
  }

  // ==================== PIPELINE ORCHESTRATION ====================

  async runFullPipeline() {
    console.log('🚀 Starting University Data Pipeline...');

    try {
      // Step 1: Fetch data from multiple sources
      console.log('📊 Fetching data from multiple sources...');
      const [qsData, theData, usNewsData, nicheData] = await Promise.allSettled([
        this.fetchQSRankings(),
        this.fetchTHERankings(),
        this.fetchUSNewsData(),
        this.fetchNicheData()
      ]);

      // Step 2: Process and combine data
      console.log('⚙️ Processing and normalizing data...');
      const allUniversities = new Map();

      // Process QS data
      if (qsData.status === 'fulfilled' && qsData.value) {
        await this.processDataSource(qsData.value, 'qs', allUniversities);
      }

      // Process THE data
      if (theData.status === 'fulfilled' && theData.value) {
        await this.processDataSource(theData.value, 'the', allUniversities);
      }

      // Process US News data
      if (usNewsData.status === 'fulfilled' && usNewsData.value) {
        await this.processDataSource(usNewsData.value, 'usnews', allUniversities);
      }

      // Step 3: Enhance data with web scraping
      console.log('🕷️ Enhancing data with web scraping...');
      await this.enhanceWithWebScraping(allUniversities);

      // Step 4: Save to database
      console.log('💾 Saving to database...');
      await this.saveAllUniversities(allUniversities);

      console.log('✅ Pipeline completed successfully!');
      return { success: true, totalUniversities: allUniversities.size };

    } catch (error) {
      console.error('❌ Pipeline failed:', error);
      throw error;
    }
  }

  async processDataSource(data, source, universitiesMap) {
    const universities = Array.isArray(data) ? data : data.universities || [];
    
    for (const universityData of universities) {
      try {
        const processed = await this.processUniversityData(universityData, source);
        const key = `${processed.universityName}-${processed.country}`.toLowerCase();
        
        if (universitiesMap.has(key)) {
          // Merge data if university already exists
          universitiesMap.set(key, this.mergeUniversityData(
            universitiesMap.get(key),
            processed
          ));
        } else {
          universitiesMap.set(key, processed);
        }
      } catch (error) {
        console.error(`Error processing university data:`, error);
      }
    }
  }

  async enhanceWithWebScraping(universitiesMap) {
    let count = 0;
    for (const [key, university] of universitiesMap) {
      if (count >= 50) break; // Limit to prevent overwhelming servers
      
      try {
        if (university.websiteUrl) {
          const scrapedData = await this.scrapeUniversityWebsite(university.websiteUrl);
          if (scrapedData) {
            universitiesMap.set(key, { ...university, ...scrapedData });
          }
        }
        count++;
      } catch (error) {
        console.error(`Error enhancing ${university.universityName}:`, error);
      }
    }
  }

  async saveAllUniversities(universitiesMap) {
    const universities = Array.from(universitiesMap.values());
    const batches = this.chunkArray(universities, this.config.batchSize);
    
    for (const batch of batches) {
      await Promise.all(
        batch.map(university => this.saveUniversityToDatabase(university))
      );
      await this.delay(1000); // Small delay between batches
    }
  }

  // ==================== UTILITY FUNCTIONS ====================

  generateSlug(text) {
    return text
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/(^-|-$)/g, '');
  }

  mergeUniversityData(existing, newData) {
    return {
      ...existing,
      ...newData,
      rankings: { ...existing.rankings, ...newData.rankings }
    };
  }

  chunkArray(array, chunkSize) {
    const chunks = [];
    for (let i = 0; i < array.length; i += chunkSize) {
      chunks.push(array.slice(i, i + chunkSize));
    }
    return chunks;
  }

  async makeRequest(url, options = {}) {
    const key = new URL(url).hostname;
    
    // Rate limiting
    if (this.rateLimiter.has(key)) {
      const lastRequest = this.rateLimiter.get(key);
      const timeDiff = Date.now() - lastRequest;
      if (timeDiff < this.config.requestDelay) {
        await this.delay(this.config.requestDelay - timeDiff);
      }
    }
    
    this.rateLimiter.set(key, Date.now());
    
    let retries = 0;
    while (retries < this.config.maxRetries) {
      try {
        const response = await axios.get(url, {
          timeout: 30000,
          ...options
        });
        return response;
      } catch (error) {
        retries++;
        if (retries === this.config.maxRetries) throw error;
        await this.delay(this.config.retryDelay * retries);
      }
    }
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  extractRankings(data, source) {
    const rankings = {};
    
    switch (source) {
      case 'qs':
        rankings.qs = data.rank || data.ranking;
        break;
      case 'the':
        rankings.the = data.rank || data.position;
        break;
      case 'usnews':
        rankings.usnews = data.rank || data.ranking;
        break;
    }
    
    return rankings;
  }

  extractAdmissionData(data, source) {
    const admission = {};
    
    if (data.admissionRate) admission.acceptanceRate = data.admissionRate * 100;
    if (data.gpa) admission.minimumGpa = data.gpa;
    if (data.gmat) admission.gmatAverage = data.gmat;
    
    return admission;
  }

  extractFinancialData(data, source) {
    const financial = {};
    
    if (data.tuition) financial.tuition = data.tuition;
    if (data.fees) financial.fees = data.fees;
    
    return financial;
  }

  extractProgramsFromData(data, source) {
    if (!data.programs && !data.majors) return [];
    
    const programs = data.programs || data.majors || [];
    return programs.map(program => ({
      name: typeof program === 'string' ? program : program.name,
      slug: this.generateSlug(typeof program === 'string' ? program : program.name),
      degreeType: program.degreeType || 'Masters'
    }));
  }

  extractOverviewFromData(data, source) {
    return data.description || data.overview || data.about || null;
  }
}

// ==================== PIPELINE SCHEDULER ====================

class PipelineScheduler {
  constructor(pipeline) {
    this.pipeline = pipeline;
    this.isRunning = false;
  }

  // Schedule pipeline to run daily
  scheduleDailyRun(hour = 2) { // Default 2 AM
    const now = new Date();
    const scheduledTime = new Date();
    scheduledTime.setHours(hour, 0, 0, 0);
    
    if (scheduledTime <= now) {
      scheduledTime.setDate(scheduledTime.getDate() + 1);
    }
    
    const msUntilRun = scheduledTime.getTime() - now.getTime();
    
    setTimeout(() => {
      this.runPipeline();
      setInterval(() => this.runPipeline(), 24 * 60 * 60 * 1000); // Every 24 hours
    }, msUntilRun);
    
    console.log(`📅 Pipeline scheduled to run daily at ${hour}:00`);
  }

  async runPipeline() {
    if (this.isRunning) {
      console.log('⏳ Pipeline is already running, skipping...');
      return;
    }
    
    this.isRunning = true;
    console.log('🔄 Starting scheduled pipeline run...');
    
    try {
      await this.pipeline.runFullPipeline();
    } catch (error) {
      console.error('❌ Scheduled pipeline run failed:', error);
    } finally {
      this.isRunning = false;
    }
  }
}

// ==================== EXPORT AND USAGE ====================

module.exports = { UniversityDataPipeline, PipelineScheduler };

// Usage example:
/*
const pipeline = new UniversityDataPipeline();
const scheduler = new PipelineScheduler(pipeline);

// Run immediately
pipeline.runFullPipeline()
  .then(result => console.log('Pipeline result:', result))
  .catch(error => console.error('Pipeline error:', error));

// Schedule daily runs at 2 AM
scheduler.scheduleDailyRun(2);
*/








// Enhanced Pipeline Configuration for US MBA Programs
// Add this to your pipeline_config.js

const MBA_PIPELINE_CONFIG = {
  // MBA-specific data sources
  mbaSources: {
    usnewsMBA: {
      url: 'https://www.usnews.com/best-graduate-schools/top-business-schools/mba-rankings',
      enabled: true,
      priority: 1
    },
    poetAndQuants: {
      url: 'https://poetsandquants.com/school-profiles/',
      enabled: true,
      priority: 1
    },
    businessweek: {
      url: 'https://www.bloomberg.com/business-school-rankings',
      enabled: true,
      priority: 2
    },
    financialTimes: {
      url: 'https://rankings.ft.com/rankings/2659/mba-2024',
      enabled: true,
      priority: 1
    },
    economist: {
      url: 'https://www.economist.com/whichmba/full-time-mba-ranking',
      enabled: true,
      priority: 2
    },
    aacsb: {
      url: 'https://www.aacsb.edu/accreditation/accredited-members',
      enabled: true,
      priority: 1 // For accreditation data
    }
  },

  // MBA program filters
  mbaFilters: {
    countries: ['United States'],
    degreeTypes: ['MBA', 'Executive MBA', 'Part-time MBA', 'Online MBA', 'Masters'],
    keywords: ['mba', 'master of business administration', 'business administration', 'management'],
    minRanking: 200, // Only top 200 MBA programs
    accreditation: ['AACSB', 'AMBA', 'EQUIS']
  },

  // Essential MBA data points to collect
  mbaDataPoints: {
    rankings: {
      usnews: true,
      financialTimes: true,
      businessweek: true,
      economist: true,
      poetAndQuants: true
    },
    admissionStats: {
      averageGMAT: true,
      gmatRange: true,
      averageGRE: true,
      greRange: true,
      averageGPA: true,
      workExperience: true,
      acceptanceRate: true,
      internationalPercentage: true
    },
    programDetails: {
      duration: true,
      startDates: true,
      specializations: true,
      concentrations: true,
      dualDegrees: true,
      exchangePrograms: true
    },
    financials: {
      tuition: true,
      totalCost: true,
      averageDebt: true,
      scholarships: true,
      assistantships: true,
      livingCosts: true
    },
    outcomes: {
      employmentRate: true,
      averageSalary: true,
      salaryRange: true,
      topEmployers: true,
      industryBreakdown: true,
      geographicPlacement: true
    }
  }
};

// Enhanced MBA-specific scrapers
class MBASpecializedScrapers extends SpecializedScrapers {
  
  // US News MBA Rankings Scraper
  async scrapeUSNewsMBARankings() {
    const browser = await this.initBrowser();
    const page = await browser.newPage();
    
    try {
      await page.goto('https://www.usnews.com/best-graduate-schools/top-business-schools/mba-rankings', {
        waitUntil: 'networkidle2'
      });
      
      await page.waitForSelector('.SearchResults-list');
      
      const mbaPrograms = await page.evaluate(() => {
        const items = document.querySelectorAll('.SearchResult');
        return Array.from(items).map(item => {
          const name = item.querySelector('.SearchResult-title a')?.textContent?.trim();
          const location = item.querySelector('.SearchResult-location')?.textContent?.trim();
          const rank = item.querySelector('.SearchResult-rank')?.textContent?.trim();
          
          // Extract detailed stats
          const stats = {};
          item.querySelectorAll('[data-testid="stats"] .Metric').forEach(metric => {
            const label = metric.querySelector('.Metric-label')?.textContent?.trim();
            const value = metric.querySelector('.Metric-value')?.textContent?.trim();
            if (label && value) {
              stats[label.toLowerCase().replace(/\s+/g, '_')] = value;
            }
          });
          
          return {
            name,
            location,
            rank: rank ? parseInt(rank) : null,
            tuition: stats.tuition,
            enrollment: stats.enrollment,
            averageGMAT: stats.average_gmat_score,
            acceptanceRate: stats.acceptance_rate,
            averageGPA: stats.average_undergraduate_gpa,
            averageWorkExperience: stats.average_years_work_experience,
            employmentRate: stats.employment_rate_at_graduation,
            averageStartingSalary: stats.average_starting_salary,
            source: 'usnews_mba'
          };
        });
      });
      
      return mbaPrograms;
    } catch (error) {
      console.error('Error scraping US News MBA rankings:', error);
      return null;
    } finally {
      await page.close();
    }
  }

  // Financial Times MBA Ranking Scraper
  async scrapeFTMBARankings() {
    const browser = await this.initBrowser();
    const page = await browser.newPage();
    
    try {
      await page.goto('https://rankings.ft.com/rankings/2659/mba-2024', {
        waitUntil: 'networkidle2'
      });
      
      await page.waitForSelector('.o-table__row');
      
      const mbaPrograms = await page.evaluate(() => {
        const rows = document.querySelectorAll('.o-table__row:not(.o-table__row--header)');
        return Array.from(rows).map(row => {
          const cells = row.querySelectorAll('.o-table__cell');
          if (cells.length === 0) return null;
          
          return {
            ftRank: cells[0]?.textContent?.trim(),
            name: cells[1]?.textContent?.trim(),
            country: cells[2]?.textContent?.trim(),
            averageSalary: cells[3]?.textContent?.trim(),
            salaryIncrease: cells[4]?.textContent?.trim(),
            valueForMoney: cells[5]?.textContent?.trim(),
            careerProgress: cells[6]?.textContent?.trim(),
            aimAchieved: cells[7]?.textContent?.trim(),
            employmentRate: cells[8]?.textContent?.trim(),
            source: 'ft_mba'
          };
        }).filter(Boolean);
      });
      
      return mbaPrograms;
    } catch (error) {
      console.error('Error scraping FT MBA rankings:', error);
      return null;
    } finally {
      await page.close();
    }
  }

  // Poet&Quants MBA Data Scraper
  async scrapePoetAndQuantsData() {
    const browser = await this.initBrowser();
    const page = await browser.newPage();
    
    try {
      await page.goto('https://poetsandquants.com/school-profiles/', {
        waitUntil: 'networkidle2'
      });
      
      // Get school profile links
      const schoolLinks = await page.evaluate(() => {
        const links = document.querySelectorAll('.school-profile-link');
        return Array.from(links).map(link => link.href);
      });
      
      const schoolData = [];
      
      // Visit each school profile (limit to prevent overwhelming)
      for (let i = 0; i < Math.min(50, schoolLinks.length); i++) {
        try {
          await page.goto(schoolLinks[i], { waitUntil: 'networkidle2' });
          
          const data = await page.evaluate(() => {
            const name = document.querySelector('h1')?.textContent?.trim();
            const stats = {};
            
            // Extract key statistics
            document.querySelectorAll('.stat-box').forEach(box => {
              const label = box.querySelector('.stat-label')?.textContent?.trim();
              const value = box.querySelector('.stat-value')?.textContent?.trim();
              if (label && value) {
                stats[label.toLowerCase().replace(/\s+/g, '_')] = value;
              }
            });
            
            return {
              name,
              ...stats,
              source: 'poet_quants',
              profileUrl: window.location.href
            };
          });
          
          if (data.name) {
            schoolData.push(data);
          }
          
          // Delay between requests
          await new Promise(resolve => setTimeout(resolve, 2000));
          
        } catch (error) {
          console.error(`Error scraping school profile ${schoolLinks[i]}:`, error);
        }
      }
      
      return schoolData;
    } catch (error) {
      console.error('Error scraping Poet&Quants data:', error);
      return null;
    } finally {
      await page.close();
    }
  }

  // AACSB Accreditation Scraper
  async scrapeAACSBAccreditation() {
    const browser = await this.initBrowser();
    const page = await browser.newPage();
    
    try {
      await page.goto('https://www.aacsb.edu/accreditation/accredited-members', {
        waitUntil: 'networkidle2'
      });
      
      await page.waitForSelector('.accredited-schools');
      
      const accreditedSchools = await page.evaluate(() => {
        const schools = document.querySelectorAll('.school-item');
        return Array.from(schools).map(school => {
          return {
            name: school.querySelector('.school-name')?.textContent?.trim(),
            country: school.querySelector('.school-country')?.textContent?.trim(),
            city: school.querySelector('.school-city')?.textContent?.trim(),
            website: school.querySelector('.school-website a')?.href,
            accreditationType: school.querySelector('.accreditation-type')?.textContent?.trim(),
            accreditationDate: school.querySelector('.accreditation-date')?.textContent?.trim(),
            source: 'aacsb'
          };
        });
      });
      
      // Filter for US schools only
      return accreditedSchools.filter(school => 
        school.country && school.country.includes('United States')
      );
      
    } catch (error) {
      console.error('Error scraping AACSB accreditation:', error);
      return null;
    } finally {
      await page.close();
    }
  }
}

// Enhanced data processing for MBA programs
class MBADataProcessor {
  
  static processMBAData(rawData, source) {
    const processed = {
      universityName: this.extractUniversityName(rawData, source),
      programName: this.extractMBAProgramName(rawData, source),
      degreeType: 'MBA',
      city: this.extractCity(rawData, source),
      state: this.extractState(rawData, source),
      country: 'United States',
      
      // MBA-specific rankings
      rankings: this.extractMBARankings(rawData, source),
      
      // Admission requirements specific to MBA
      admissionData: this.extractMBAAdmissionData(rawData, source),
      
      // Financial data
      financialData: this.extractMBAFinancialData(rawData, source),
      
      // Outcomes data
      outcomesData: this.extractMBAOutcomesData(rawData, source),
      
      // Program details
      programDetails: this.extractMBAProgramDetails(rawData, source),
      
      // Accreditation
      accreditation: this.extractAccreditation(rawData, source)
    };
    
    processed.slug = this.generateMBASlug(processed.universityName, processed.programName);
    return processed;
  }
  
  static extractMBARankings(data, source) {
    const rankings = {};
    
    switch (source) {
      case 'usnews_mba':
        rankings.usnews = data.rank;
        break;
      case 'ft_mba':
        rankings.financialTimes = parseInt(data.ftRank);
        break;
      case 'poet_quants':
        rankings.poetAndQuants = data.overall_rank;
        break;
      case 'businessweek':
        rankings.businessweek = data.rank;
        break;
      case 'economist':
        rankings.economist = data.rank;
        break;
    }
    
    return rankings;
  }
  
  static extractMBAAdmissionData(data, source) {
    const admission = {};
    
    // GMAT scores
    if (data.averageGMAT || data.average_gmat_score) {
      admission.gmatAverageScore = parseInt(data.averageGMAT || data.average_gmat_score);
    }
    
    if (data.gmatRange) {
      const range = data.gmatRange.split('-');
      admission.gmatMinScore = parseInt(range[0]);
      admission.gmatMaxScore = parseInt(range[1]);
    }
    
    // GRE scores
    if (data.averageGRE) {
      admission.greAverageScore = parseInt(data.averageGRE);
    }
    
    // GPA
    if (data.averageGPA || data.average_undergraduate_gpa) {
      admission.minimumGpa = parseFloat(data.averageGPA || data.average_undergraduate_gpa);
    }
    
    // Work experience
    if (data.averageWorkExperience || data.average_years_work_experience) {
      admission.minWorkExperience = parseInt(data.averageWorkExperience || data.average_years_work_experience) * 12; // Convert to months
    }
    
    // Acceptance rate
    if (data.acceptanceRate) {
      admission.acceptanceRate = parseFloat(data.acceptanceRate.replace('%', ''));
    }
    
    return admission;
  }
  
  static extractMBAFinancialData(data, source) {
    const financial = {};
    
    if (data.tuition) {
      financial.tuition = this.parseFinancialAmount(data.tuition);
    }
    
    if (data.totalCost || data.total_cost) {
      financial.totalCost = this.parseFinancialAmount(data.totalCost || data.total_cost);
    }
    
    if (data.averageDebt || data.average_debt) {
      financial.averageDebt = this.parseFinancialAmount(data.averageDebt || data.average_debt);
    }
    
    return financial;
  }
  
  static extractMBAOutcomesData(data, source) {
    const outcomes = {};
    
    if (data.employmentRate || data.employment_rate_at_graduation) {
      outcomes.employmentRate = parseFloat((data.employmentRate || data.employment_rate_at_graduation).replace('%', ''));
    }
    
    if (data.averageStartingSalary || data.averageSalary) {
      outcomes.averageStartingSalary = this.parseFinancialAmount(data.averageStartingSalary || data.averageSalary);
    }
    
    if (data.salaryIncrease) {
      outcomes.salaryIncrease = parseFloat(data.salaryIncrease.replace('%', ''));
    }
    
    return outcomes;
  }
  
  static extractMBAProgramDetails(data, source) {
    const details = {};
    
    if (data.duration) {
      details.duration = data.duration;
    }
    
    if (data.specializations) {
      details.specializations = Array.isArray(data.specializations) ? 
        data.specializations : data.specializations.split(',').map(s => s.trim());
    }
    
    return details;
  }
  
  static extractAccreditation(data, source) {
    const accreditation = [];
    
    if (source === 'aacsb') {
      accreditation.push({
        type: 'AACSB',
        accreditationType: data.accreditationType,
        accreditationDate: data.accreditationDate
      });
    }
    
    return accreditation;
  }
  
  static parseFinancialAmount(amountStr) {
    if (!amountStr) return null;
    
    const cleaned = amountStr.replace(/[$,\s]/g, '');
    const amount = parseFloat(cleaned);
    
    return isNaN(amount) ? null : amount;
  }
  
  static generateMBASlug(universityName, programName) {
    return `${universityName}-${programName || 'mba'}`
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/(^-|-$)/g, '');
  }
  
  static extractUniversityName(data, source) {
    let name = data.name || data.institution || data.universityName;
    
    // Clean up common suffixes/prefixes
    if (name) {
      name = name.replace(/\s*-\s*MBA.*$/i, ''); // Remove MBA suffix
      name = name.replace(/\s*Business School.*$/i, ''); // Remove Business School suffix
    }
    
    return name;
  }
  
  static extractMBAProgramName(data, source) {
    // Extract specific MBA program name if available
    if (data.programName) return data.programName;
    
    // Default MBA program names based on common patterns
    const name = data.name || '';
    
    if (name.includes('Executive MBA')) return 'Executive MBA';
    if (name.includes('Part-time MBA')) return 'Part-time MBA';
    if (name.includes('Online MBA')) return 'Online MBA';
    if (name.includes('Professional MBA')) return 'Professional MBA';
    
    return 'MBA'; // Default full-time MBA
  }
}

module.exports = {
  MBA_PIPELINE_CONFIG,
  MBASpecializedScrapers,
  MBADataProcessor
};